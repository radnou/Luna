rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }
    
    function isValidPDFFile() {
      return request.resource.contentType == 'application/pdf' &&
             request.resource.size < 50 * 1024 * 1024; // 50MB limit
    }
    
    function isValidAudioFile() {
      return request.resource.contentType.matches('audio/.*') &&
             request.resource.size < 20 * 1024 * 1024; // 20MB limit
    }
    
    // User files
    match /users/{userId}/{allPaths=**} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId) && (
        isValidImageFile() || 
        isValidPDFFile() || 
        isValidAudioFile()
      );
      allow delete: if isOwner(userId);
    }
    
    // Public analysis PDFs
    match /analyses/{analysisId}/{fileName} {
      allow read: if true; // Public access for shared analyses
      allow write: if false; // Only server can write
    }
    
    // System backups (admin only)
    match /backups/{backup=**} {
      allow read: if false;
      allow write: if false; // Only server/admin
    }
    
    // Temporary uploads
    match /temp/{sessionId}/{fileName} {
      allow read: if isAuthenticated() && request.auth.uid == sessionId;
      allow write: if isAuthenticated() && 
                      request.auth.uid == sessionId &&
                      request.resource.size < 100 * 1024 * 1024; // 100MB limit
      allow delete: if isAuthenticated() && request.auth.uid == sessionId;
    }
  }
}