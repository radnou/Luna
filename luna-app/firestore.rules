rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function hasRequiredUserFields() {
      return request.resource.data.keys().hasAll(['email', 'displayName', 'createdAt', 'updatedAt']);
    }
    
    function hasRequiredJournalFields() {
      return request.resource.data.keys().hasAll(['userId', 'content', 'mood', 'createdAt']);
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && hasRequiredUserFields();
      allow update: if isOwner(userId) && hasRequiredUserFields()
        && request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if false; // Users cannot delete their accounts via client
    }
    
    // User subcollections
    match /users/{userId}/profile/{document=**} {
      allow read, write: if isOwner(userId);
    }
    
    match /users/{userId}/preferences/{document=**} {
      allow read, write: if isOwner(userId);
    }
    
    match /users/{userId}/notifications/{document=**} {
      allow read: if isOwner(userId);
      allow write: if false; // Only server can write notifications
    }
    
    // Journals collection
    match /journals/{journalId} {
      allow read: if isValidUser() && resource.data.userId == request.auth.uid;
      allow create: if isValidUser() && hasRequiredJournalFields() 
        && request.resource.data.userId == request.auth.uid;
      allow update: if isValidUser() && resource.data.userId == request.auth.uid
        && request.resource.data.userId == resource.data.userId
        && request.resource.data.createdAt == resource.data.createdAt;
      allow delete: if isValidUser() && resource.data.userId == request.auth.uid;
    }
    
    // Journal entries subcollection
    match /journals/{journalId}/entries/{entryId} {
      allow read: if isValidUser() && get(/databases/$(database)/documents/journals/$(journalId)).data.userId == request.auth.uid;
      allow write: if isValidUser() && get(/databases/$(database)/documents/journals/$(journalId)).data.userId == request.auth.uid;
    }
    
    // Horoscopes collection (public read, admin write only)
    match /horoscopes/{document=**} {
      allow read: if true;
      allow write: if false;
    }
    
    // Zodiac compatibility data (public read)
    match /zodiacCompatibility/{document=**} {
      allow read: if true;
      allow write: if false;
    }
    
    // App configuration (public read)
    match /config/{document=**} {
      allow read: if true;
      allow write: if false;
    }
    
    // Reports collection (user reports)
    match /reports/{reportId} {
      allow read: if isSignedIn() && (resource.data.reporterId == request.auth.uid || resource.data.reportedUserId == request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.reporterId == request.auth.uid;
      allow update, delete: if false;
    }
    
    // Block all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}